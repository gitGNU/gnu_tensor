\input texinfo @c -*-texinfo-*-
@setfilename tensor.info
@settitle TENSOR extensions to the GNU Scientific Library
@finalout

@dircategory Scientific software
@direntry
* tensor: (tensor).                   TENSOR extensions to GSL
@end direntry

@c define our special TeX math macros
@include mathinclude.texi
@include version-ref.texi

@iftex
@copying
Copyright @copyright{} 2004-2010 Jordi Burguet-Castell.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled "GNU
Free Documentation License".
@end copying
@end iftex

@titlepage
@title TENSOR
@subtitle Extensions to the GNU Scientific Library
@subtitle Version @value{VERSION}
@subtitle @value{UPDATED}

@author Jordi Burguet-Castell (@email{jbc@@member.fsf.org})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top tensor

This file documents @strong{tensor}, a data type to represent tensors
and a collection of functions to do basic manipulations with them. It
is intended to be used as an extension of the GNU Scientific Library
(GSL).

Information about GSL can be found at the project homepage,
@uref{http://www.gnu.org/software/gsl/}.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License.
@end ifnottex

@menu
* Introduction::
* Functions::
* Examples::
* References and Further Reading::
* GNU Free Documentation License::
* Function Index::
@c * Variable Index::
@c * Type Index::
@c * Concept Index::
@end menu

@node  Introduction, Functions, Top, Top
@chapter Introduction

A @emph{tensor} is a data structure that generalizes vectors and
(square) matrices. A tensor of rank @var{r} and dimension @var{d} is a
``r-hipercube'' with @var{d} elements in each row, column, etc.

The header file is @file{tensor.h}.

@node Functions, Examples, Introduction, Top
@chapter Functions

The functions @code{tensor_f} work with elements of type @code{double}.

There are other versions of the form @code{tensor_TYPE_f} where @code{TYPE} is any of:
@itemize
@item complex: complex double
@item long_double: long double
@item float: float
@item ulong: unsigned long
@item long: long
@item uint: unsigned int
@item int: int
@item ushort: unsigned short
@item short: short
@item uchar: unsigned char
@item char: char
@end itemize

Allocation

@deftypefun {tensor *} tensor_alloc (const unsigned int @var{rank}, const size_t @var{dimension});
Allocate memory for a tensor of rank @var{rank} and dimension
@var{dimension}, and return a pointer to its position in memory.
@end deftypefun

@deftypefun {tensor *} tensor_calloc (const unsigned int @var{rank}, const size_t @var{dimension});
Allocate memory for a tensor of rank @var{rank} and dimension
@var{dimension}, set all its elements to 0 and return a pointer to its
position in memory.
@end deftypefun

@deftypefun {tensor *} tensor_copy ({tensor *} @var{t});
Create a copy of tensor @var{t} and return a pointer to its position in memory.
@end deftypefun

@deftypefun void tensor_free ({tensor *} @var{t});
Release the memory used by tensor @var{t}.
@end deftypefun

Conversion

@deftypefun {gsl_matrix *} tensor_2matrix ({tensor *} @var{t});
Convert a rank 2 tensor to a gsl_matrix.
@end deftypefun

@deftypefun {gsl_vector *} tensor_2vector ({tensor *} @var{t});
Convert a rank 1 tensor to a gsl_vector.
@end deftypefun

 Get/Set elements

@deftypefun double tensor_get ({const tensor *} @var{t}, {const size_t *} @var{indices});
t[indices]
@end deftypefun

@deftypefun void tensor_set ({tensor *} @var{t}, {const size_t *} @var{indices}, const double @var{x});
t[indices] = x
@end deftypefun

  Access pointer

@deftypefun {double *} tensor_ptr (tensor * @var{t}, const size_t * @var{indices});
&t[indices]
@end deftypefun

@deftypefun {const double *} tensor_const_ptr (const tensor * @var{t}, const size_t * @var{indices});
&t[indices]  (const pointer)
@end deftypefun

  Set to a value

@deftypefun void tensor_set_zero ({tensor *} @var{t});
t = 0
@end deftypefun

@deftypefun void tensor_set_all ({tensor *} @var{t}, double @var{x});
t = x
@end deftypefun

  IO

@deftypefun int tensor_fread (FILE * @var{stream}, tensor * @var{t});
Read binary representation of tensor from @var{stream} and save it in @var{t}.
@end deftypefun

@deftypefun int tensor_fwrite (FILE * @var{stream}, const tensor * @var{t});
Write binary representation of tensor @var{t} to @var{stream}.
@end deftypefun

@deftypefun int tensor_fscanf (FILE * @var{stream}, tensor * @var{t});
Read text representation of tensor from @var{stream} and save it in @var{t}.
@end deftypefun

@deftypefun int tensor_fprintf (FILE * @var{stream}, const tensor * @var{t}, const char * @var{format});
Write text representation of tensor @var{t} to @var{stream}, using format @var{format} for its elements.
@end deftypefun

  Copy

@deftypefun int tensor_memcpy (tensor * @var{dest}, const tensor * @var{src});
dest = src
@end deftypefun

@deftypefun int tensor_swap (tensor * @var{t1}, tensor * @var{t2});
t1, t2 = t2, t1
@end deftypefun

  Swap indices

@deftypefun {tensor *} tensor_swap_indices ({const tensor *} t_@var{ij}, size_t @var{i}, size_t @var{j});
t[i,j] = t[j,i]
@end deftypefun

  Maxima

@deftypefun double tensor_max (const tensor * @var{t});
Maximum element of tensor @var{t}.
@end deftypefun

@deftypefun double tensor_min (const tensor * @var{t});
Minimum element of tensor @var{t}.
@end deftypefun

@deftypefun void tensor_minmax (const tensor * @var{t}, double * min_@var{out}, double * @var{max}_out);
Copy the minimum and maximum elements of @var{t} in min_@var{out} and @var{max}_out respectively.
@end deftypefun

@deftypefun void tensor_max_index (const tensor * @var{t}, size_t * @var{indices});
Get the indices of the maximum element of @var{t}.
@end deftypefun

@deftypefun void tensor_min_index (const tensor * @var{t}, size_t * @var{indices});
Get the indices of the minimum element of @var{t}.
@end deftypefun

@deftypefun void tensor_minmax_index (const tensor * @var{t}, size_t * @var{imin}, size_t * @var{imax});
Get the indices of the minimum and maximum elements of @var{t}.
@end deftypefun

  Properties

@deftypefun int tensor_isnull (const tensor * @var{t});
t == 0
@end deftypefun

  Operations

@deftypefun int tensor_add (tensor * @var{a}, const tensor * @var{b});
a += b
@end deftypefun

@deftypefun int tensor_sub (tensor * @var{a}, const tensor * @var{b});
a -= b
@end deftypefun

@deftypefun int tensor_mul_elements (tensor * @var{a}, const tensor * @var{b});
a .*= b
@end deftypefun

@deftypefun int tensor_div_elements (tensor * @var{a}, const tensor * @var{b});
a ./= b
@end deftypefun

@deftypefun int tensor_scale (tensor * @var{a}, const double @var{x});
a *= x
@end deftypefun

@deftypefun int tensor_add_constant (tensor * @var{a}, const double @var{x});
a += x
@end deftypefun

@deftypefun int tensor_add_diagonal (tensor * @var{a}, const double @var{x});
a += x*I
@end deftypefun

@deftypefun {tensor *} tensor_product (const tensor * @var{a}, const tensor * @var{b});
a * b  (generalization of matrix product)
@end deftypefun

@deftypefun {tensor *} tensor_contract (const tensor * @var{t}_ij, size_t @var{i}, size_t @var{j});
t[i1,i2,i3,...] with indices i=j.
@end deftypefun

@node Examples, References and Further Reading, Functions, Top
@chapter Examples

@example
#include <gsl/gsl.h>
#include <tensor.h>

#define RANK 3
#define DIMENSION 5


int main (void)
@{
  size_t i, j, k;     /* tensor indices */
  size_t indices[3];  /* to pass tensor indices */

  /* Allocate space for the tensors */
  tensor * a = tensor_calloc (RANK, DIMENSION);
  tensor * b = tensor_calloc (RANK, DIMENSION);
  tensor * t = tensor_calloc (RANK, DIMENSION);

  /* Fill them */
  for (i = 0; i < DIMENSION; i++)
    @{
      for (j = 0; j < DIMENSION; j++)
        @{
          for (k = 0; k < DIMENSION; k++)
            @{
              counter++;
              indices[0] = i;  indices[1] = j;  indices[2] = k;
              tensor_set (a, indices, 3 + i + 5 * j + 2 * k);
              tensor_set (b, indices, 3 + 2 * i + 4 * j + k);
            @}
        @}
    @}

  /*
   * Do some operations
   */

  /* Sum */
  tensor_memcpy (t, a);
  tensor_add (t, b);     /* t = a + b */
  tensor_fprintf (stdout, t, "%g");

  /* Element division */
  tensor_memcpy (t, a);
  tensor_div_elements (t, b);  /* t = a ./ b */
  tensor_fprintf (stdout, t, "%g");

  /* Tensor product */
  @{
    tensor * c = tensor_product (a, b);
    tensor_fprintf (stdout, c, "%g");
    tensor_free (c);
  @}

  /* Index contraction */
  @{
    tensor * tt = tensor_contract (a, 0, 1);
    tensor_fprintf (stdout, tt, "%g");
    tensor_free (tt);
  @}

  tensor_free (a);
  tensor_free (b);

  tensor_free (t);

  return 0;
@}
@end example

Compile with:
@code{gcc -o myprog -lgslcblas -lgsl -ltensor myprog.c}

@node References and Further Reading, GNU Free Documentation License, Examples, Top
@chapter References and Further Reading

@url{http://www.gnu.org/software/gsl/manual/html_node/Vectors-and-Matrices.html}

@node GNU Free Documentation License, Function Index, References and Further Reading, Top
@unnumbered GNU Free Documentation License
@include fdl-1.3.texi

@node Function Index,  , GNU Free Documentation License, Top
@unnumbered Function Index

@printindex fn

@c @node Variable Index, Type Index, Function Index, Top
@c @unnumbered Variable Index
@c
@c @printindex vr

@c @node Type Index, Concept Index, Variable Index, Top
@c @unnumbered Type Index
@c
@c @printindex tp
@c
@c @node Concept Index,  , Type Index, Top
@c @unnumbered Concept Index
@c
@c @printindex cp

@bye
